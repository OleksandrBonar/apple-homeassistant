domofon:

  automation:
    - alias: Domofon - Incoming Call Notification
      initial_state: true
      trigger:
        - platform: state
          entity_id: sensor.domofon_state
          to: "ring"
      action:
        service: notify.telegram_user_id_1
        data:
          message: "_Intercom_: incoming call... {% if is_state('sensor.domofon_mode', 'always') or is_state('sensor.domofon_mode', 'once') %}(*will open automatically*){% endif %}"
          data:
            inline_keyboard:
              - "{{ '-' if is_state('sensor.domofon_mode', 'always') or is_state('sensor.domofon_mode', 'once') else 'Open:/domofon_open, Reject:/domofon_reject' }}"

    - alias: Domofon - Telegram Control - domofon_open
      initial_state: true
      trigger:
        platform: event
        event_type: telegram_callback
        event_data:
          data: "/domofon_open"
      action:
        - service: input_select.select_option
          data:
            entity_id: select.domofon_mode
            option: once
        - service: telegram_bot.answer_callback_query
          data:
            callback_query_id: "{{ trigger.event.data.id }}"
            message: "{{ 'Opening...' if is_state('sensor.domofon_state', 'ring') else 'No incoming call' }}"
        - service: telegram_bot.edit_message
          data:
            message_id: "{{ trigger.event.data.message.message_id }}"
            chat_id: "{{ trigger.event.data.chat_id }}"
            message: |
              _Intercom_: incoming call...
              {{ 'Intercom *open*!' if is_state('sensor.domofon_state', 'ring') else '' }}

    - alias: Domofon - Telegram Control - domofon_reject
      initial_state: true
      trigger:
        platform: event
        event_type: telegram_callback
        event_data:
          data: "/domofon_reject"
      action:
        - service: input_select.select_option
          entity_id: select.domofon_mode
          data:
            option: drop
        - service: telegram_bot.answer_callback_query
          data:
            callback_query_id: "{{ trigger.event.data.id }}"
            message: "{{ 'Rejecting...' if is_state('sensor.domofon_state', 'ring') else 'No incoming call' }}"
        - delay:
            seconds: 2
        - service: telegram_bot.edit_message
          data:
            message_id: "{{ trigger.event.data.message.message_id }}"
            chat_id: "{{ trigger.event.data.chat_id }}"
            message: |
              _Intercom_: incoming call...
              {{ 'Call *rejected*!' if is_state('sensor.domofon_state', 'idle') else '' }}

    - alias: Domofon - Mute and UnMute by Time
      initial_state: true
      trigger:
        - platform: time
          at: "23:00:00"
        - platform: time
          at: "07:00:00"
      action:
        - service: >-
            {% if trigger.now.hour == 23 -%}
              switch.turn_on
            {% elif trigger.now.hour == 7 -%}
              switch.turn_off
            {% endif %}
          data:
            entity_id: switch.domofon_sound

    - alias: Domofon - Open Once for Couriers
      initial_state: true
      trigger:
        - platform: state
          entity_id:
            - sensor.oleksandr_iphone_last_notification
      condition:
        condition: or
        conditions:
          - condition: template
            value_template: >-
              {{ trigger.to_state.state | regex_search('Text .* string .*') }}
          - condition: template
            value_template: >-
              {{ trigger.to_state.state | regex_search('Message') }}
      action:
        - service: input_select.select_option
          data:
            entity_id: select.domofon_mode
            option: once
        - service: notify.telegram_user_id_1
          data:
            message: "The courier is on the way, the one-time auto-opening mode is enabled for the intercom."

    - alias: Domofon - Open Once at Enter to Home Zone
      initial_state: true
      trigger: 
        - platform: zone
          entity_id:
            - person.oleksandr
          zone: zone.domofon
          event: enter
      action:
        - service: input_select.select_option
          data:
            entity_id: select.domofon_mode
            option: once
        - service: switch.turn_on
          data:
            entity_id: switch.domofon_sound
        - service: notify.telegram_user_id_1
          data:
            message: "_Intercom_: single auto-opening mode is enabled."
        - wait_for_trigger:
          - platform: state
            entity_id: sensor.domofon_state
            to: 'ring'
          timeout: "00:10:00"
        - choose:
          - conditions: >-
              {{ is_state('sensor.domofon_mode', 'once') }}
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: select.domofon_mode
                  option: never
              - service: switch.turn_off
                data:
                  entity_id: switch.domofon_sound
              - service: notify.telegram_user_id_1
                data:
                  message: "_Intercom_: Disabled single auto-opening mode."
